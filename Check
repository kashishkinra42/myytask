
const express = require('express');
const fs = require('fs');
const multer = require('multer');
const path = require('path');

const app = express();
const upload = multer({ dest: 'uploads/' });

const log = (message) => {
  console.log(`[${new Date().toISOString()}] ${message}`);
};

app.post('/extract-tags', upload.single('file'), async (req, res) => {
  if (!req.file) {
    log(`No file received in the request`);
    return res.status(400).send('No file uploaded');
  }

  log(`Received file for extraction: ${req.file.path}`);
  const filePath = req.file.path;

  try {
    const jsonFilePath = await handleUpload(filePath);
    res.status(200).sendFile(path.resolve(jsonFilePath));
  } catch (error) {
    console.error('Error extracting tags:', error);
    res.status(500).send('Internal Server Error');
  } finally {
    fs.unlinkSync(filePath); // Clean up the uploaded file
  }
});

const handleUpload = async (filePath) => {
  try {
    // Assuming the upload.js logic is used here
    const upload = require('./upload'); // Adjust this path as necessary
    const tags = await upload.extractContentControlTags(filePath);
    const jsonFilePath = './myoutput.json';
    fs.writeFileSync(jsonFilePath, JSON.stringify(tags, null, 2));
    return jsonFilePath;
  } catch (error) {
    console.error('Error handling upload:', error);
    throw error;
  }
};

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  log(`Server is running on port ${PORT}`);
});


Upload js 
const fs = require('fs');
const path = require('path');
const JSZip = require('jszip');
const xml2js = require('xml2js');

// Replace with the path to your Word document
const filePath = path.join(__dirname, 'your-document.docx');

const extractContentControlTags = async (filePath) => {
  try {
    const data = await fs.promises.readFile(filePath);
    const zip = await JSZip.loadAsync(data);
    const documentXml = await zip.file('word/document.xml').async('text');
    const xmlParsed = await xml2js.parseStringPromise(documentXml);

    const tags = {};
    const body = xmlParsed['w:document']['w:body'][0];
    traverseNodes(body, tags);

    return tags;
  } catch (error) {
    console.error('Error:', error);
    throw error;
  }
};

const traverseNodes = (node, tags) => {
  if (node['w:sdt']) {
    node['w:sdt'].forEach(sdt => {
      const sdtPr = sdt['w:sdtPr'] && Array.isArray(sdt['w:sdtPr']) ? sdt['w:sdtPr'][0] : null;
      const tag = sdtPr && sdtPr['w:tag'] && Array.isArray(sdtPr['w:tag']) ? sdtPr['w:tag'][0] : null;
      if (tag && tag['$'] && tag['$']['w:val']) {
        const tagName = tag['$']['w:val'];
        const sdtContent = sdt['w:sdtContent'] && Array.isArray(sdt['w:sdtContent']) ? sdt['w:sdtContent'][0] : null;
        const tagValue = sdtContent ? extractTagValue(sdtContent) : '';
        if (tagValue.trim() !== '') {
          tags[tagName] = tagValue;
        }
      }
    });
  }
  Object.values(node).forEach(value => {
    if (Array.isArray(value)) {
      value.forEach(child => traverseNodes(child, tags));
    }
  });
};

const extractTagValue = (content) => {
  let text = '';
  function traverseContent(contentNode) {
    if (contentNode['w:t'] && Array.isArray(contentNode['w:t'])) {
      contentNode['w:t'].forEach(textNode => {
        if (typeof textNode === 'string') {
          text += textNode;
        } else if (textNode['_']) {
          text += textNode['_'];
        }
      });
    }
    Object.values(contentNode).forEach(value => {
      if (Array.isArray(value)) {
        value.forEach(child => traverseContent(child));
      }
    });
  }
  traverseContent(content);
  return text;
};

const main = async () => {
  try {
    const tags = await extractContentControlTags(filePath);
    const jsonFilePath = './myoutput.json';
    fs.writeFileSync(jsonFilePath, JSON.stringify(tags, null, 2));
    console.log(`Tags extracted successfully and saved to ${jsonFilePath}`);
  } catch (error) {
    console.error('Error:', error);
  }
};

main();


//----------------


app.js
const express = require('express');
const fs = require('fs');
const multer = require('multer');
const path = require('path');

const app = express();
const upload = multer({ dest: 'uploads/' });

const log = (message) => {
  console.log(`[${new Date().toISOString()}] ${message}`);
};

app.post('/extract-tags', upload.single('file'), async (req, res) => {
  if (!req.file) {
    log(`No file received in the request`);
    return res.status(400).send('No file uploaded');
  }

  log(`Received file for extraction: ${req.file.path}`);
  const filePath = req.file.path;

  try {
    const handleUpload = require('./upload'); // Ensure upload.js is in the same directory
    const jsonFilePath = await handleUpload(filePath);
    res.status(200).sendFile(path.resolve(jsonFilePath));
  } catch (error) {
    console.error('Error extracting tags:', error);
    res.status(500).send('Internal Server Error');
  } finally {
    fs.unlinkSync(filePath); // Clean up the uploaded file
  }
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  log(`Server is running on port ${PORT}`);
});



upload.js

const fs = require('fs');
const path = require('path');
const JSZip = require('jszip');
const xml2js = require('xml2js');

const extractContentControlTags = async (filePath) => {
  try {
    const data = await fs.promises.readFile(filePath);
    const zip = await JSZip.loadAsync(data);
    const documentXml = await zip.file('word/document.xml').async('text');
    const xmlParsed = await xml2js.parseStringPromise(documentXml);

    const tags = {};
    const body = xmlParsed['w:document']['w:body'][0];
    traverseNodes(body, tags);

    return tags;
  } catch (error) {
    console.error('Error:', error);
    throw error;
  }
};

const traverseNodes = (node, tags) => {
  if (node['w:sdt']) {
    node['w:sdt'].forEach(sdt => {
      const sdtPr = sdt['w:sdtPr'] && Array.isArray(sdt['w:sdtPr']) ? sdt['w:sdtPr'][0] : null;
      const tag = sdtPr && sdtPr['w:tag'] && Array.isArray(sdtPr['w:tag']) ? sdtPr['w:tag'][0] : null;
      if (tag && tag['$'] && tag['$']['w:val']) {
        const tagName = tag['$']['w:val'];
        const sdtContent = sdt['w:sdtContent'] && Array.isArray(sdt['w:sdtContent']) ? sdt['w:sdtContent'][0] : null;
        const tagValue = sdtContent ? extractTagValue(sdtContent) : '';
        if (tagValue.trim() !== '') {
          tags[tagName] = tagValue;
        }
      }
    });
  }
  Object.values(node).forEach(value => {
    if (Array.isArray(value)) {
      value.forEach(child => traverseNodes(child, tags));
    }
  });
};

const extractTagValue = (content) => {
  let text = '';
  function traverseContent(contentNode) {
    if (contentNode['w:t'] && Array.isArray(contentNode['w:t'])) {
      contentNode['w:t'].forEach(textNode => {
        if (typeof textNode === 'string') {
          text += textNode;
        } else if (textNode['_']) {
          text += textNode['_'];
        }
      });
    }
    Object.values(contentNode).forEach(value => {
      if (Array.isArray(value)) {
        value.forEach(child => traverseContent(child));
      }
    });
  }
  traverseContent(content);
  return text;
};

const handleUpload = async (filePath) => {
  try {
    const tags = await extractContentControlTags(filePath);
    const jsonFilePath = './myoutput.json';
    fs.writeFileSync(jsonFilePath, JSON.stringify(tags, null, 2));
    return jsonFilePath;
  } catch (error) {
    console.error('Error handling upload:', error);
    throw error;
  }
};

module.exports = handleUpload;

=========================================================
============================================================
======================================================



{
  "Incident Number": "1234",
  "Date": "6/13/2024",
  "Authors": "Kashish kinraa",
  "Status": "Mitigated",
  "Summary": "This is the root cause",
  "Impact": "This is the impact This is the impact",
  "Root Causes": "This is the root cause",
  "Trigger": "Hellohi",
  "Change(s) that triggered the incident": "Hello hiHellohi",
  "Resolution": "Hello hhi",
  "Detection": "Helloi",
  "Incident Theme": "Choose an item.",
  "Link to the latest ORR": "Hello hilohi",
  "SLO Impact": "Hello hi",
  "What Went Well": "Kash",
  "What Went Wrong": "Click or tap here to enter text.",
  "Where We Got Lucky": [
    " Kash",
    "Kinra",
    {
      "text": "My name",
      "highlighted": true
    },
    {
      "text": "Heloo",
      "highlighted": true
    },
    "yes"
  ],
  "F2": "Click or tap here to enter text."
}
