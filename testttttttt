const fs = require('fs');
const AdmZip = require('adm-zip');
const { v4: uuidv4 } = require('uuid');
const { DOMParser, XMLSerializer } = require('@xmldom/xmldom');
const xpath = require('xpath');
const assert = require('assert');

const { processDocument, readZipFile, writeZipFile, processTagValue, replacePlaceholder } = require('./PostData'); // replace with actual path

// Mock data
const jsonContent = {
  "Incident num": "123c",
  "authors": "kashish",
  "date": "01/07/2024"
};

const mockDocumentContent = `
<w:document xmlns:w="http://schemas.openxmlformats.org/wordprocessingml/2006/main">
  <w:body>
    <w:sdt>
      <w:sdtPr>
        <w:tag w:val="Incident num"/>
      </w:sdtPr>
      <w:sdtContent>
        <w:r>
          <w:t>Placeholder</w:t>
        </w:r>
      </w:sdtContent>
    </w:sdt>
    <w:sdt>
      <w:sdtPr>
        <w:tag w:val="authors"/>
      </w:sdtPr>
      <w:sdtContent>
        <w:r>
          <w:t>Placeholder</w:t>
        </w:r>
      </w:sdtContent>
    </w:sdt>
    <w:sdt>
      <w:sdtPr>
        <w:tag w:val="date"/>
      </w:sdtPr>
      <w:sdtContent>
        <w:r>
          <w:t>Placeholder</w:t>
        </w:r>
      </w:sdtContent>
    </w:sdt>
  </w:body>
</w:document>`;

describe('Document Processing Functions', function() {

  it('should read the content of an existing file in a zip archive', function() {
    const zip = new AdmZip();
    const fileName = 'test.txt';
    zip.addFile(fileName, Buffer.from('Test content', 'utf8'));
    const zipFilePath = `./${uuidv4()}.zip`;
    zip.writeZip(zipFilePath);

    const content = readZipFile(zipFilePath, fileName);
    assert.strictEqual(content, 'Test content');

    fs.unlinkSync(zipFilePath); // Clean up
  });

  it('should throw an error if the file does not exist in the zip archive', function() {
    const zip = new AdmZip();
    const zipFilePath = `./${uuidv4()}.zip`;
    zip.writeZip(zipFilePath);

    assert.throws(() => {
      readZipFile(zipFilePath, 'nonexistent.txt');
    }, /Entry not found/);

    fs.unlinkSync(zipFilePath); // Clean up
  });

  it('should update the content of a file in a zip archive', function() {
    const zip = new AdmZip();
    const fileName = 'word/document.xml';
    zip.addFile(fileName, Buffer.from(mockDocumentContent, 'utf8'));
    const zipFilePath = `./${uuidv4()}.zip`;
    zip.writeZip(zipFilePath);

    // New content to replace old content in the DOCX file
    const newContent = `
    <w:document xmlns:w="http://schemas.openxmlformats.org/wordprocessingml/2006/main">
      <w:body>
        <w:p>
          <w:r>
            <w:t>New content</w:t>
          </w:r>
        </w:p>
      </w:body>
    </w:document>`;

    writeZipFile(zipFilePath, fileName, newContent);
    const content = readZipFile(zipFilePath, fileName);
    assert(content.includes('<w:t>New content</w:t>'));

    fs.unlinkSync(zipFilePath); // Clean up
  });

  it('should process array values correctly', function() {
    assert.strictEqual(processTagValue('simple text'), 'simple text');
    assert.strictEqual(processTagValue({ text: 'text object' }), 'text object');
    assert.strictEqual(processTagValue(['item1', 'item2']), '1. item1\n2. item2');
    assert.strictEqual(processTagValue([{ text: 'object item' }]), '1. object item');
  });

  it('should replace placeholders in the document content', function() {
    const updatedContent = replacePlaceholder(mockDocumentContent, jsonContent);
    assert(updatedContent.includes('<w:t>123c</w:t>'));
    assert(updatedContent.includes('<w:t>kashish</w:t>'));
    assert(updatedContent.includes('<w:t>01/07/2024</w:t>'));
  });

});
