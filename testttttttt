describe('Document Processing Functions', function() {

  it('should read the content of an existing file in a zip archive', function() {
    const zip = new AdmZip();
    const fileName = 'test.txt';
    zip.addFile(fileName, Buffer.from('Test content', 'utf8'));
    const zipFilePath = `./${uuidv4()}.zip`;
    zip.writeZip(zipFilePath);

    const content = readZipFile(zipFilePath, fileName);
    assert.strictEqual(content, 'Test content');
    console.log('Assertion 1: Passed');

    fs.unlinkSync(zipFilePath); // Clean up
  });

  it('should throw an error if the file does not exist in the zip archive', function() {
    const zip = new AdmZip();
    const zipFilePath = `./${uuidv4()}.zip`;
    zip.writeZip(zipFilePath);

    assert.throws(() => {
      readZipFile(zipFilePath, 'nonexistent.txt');
    }, /Entry not found/);
    console.log('Assertion 2: Passed');

    fs.unlinkSync(zipFilePath); // Clean up
  });

  it('should update the content of a file in a zip archive', function() {
    const zip = new AdmZip();
    const fileName = 'test.txt';
    zip.addFile(fileName, Buffer.from('Old content', 'utf8'));
    const zipFilePath = `./${uuidv4()}.zip`;
    zip.writeZip(zipFilePath);

    writeZipFile(zipFilePath, fileName, 'New content');
    const content = readZipFile(zipFilePath, fileName);
    assert.strictEqual(content, 'New content');
    console.log('Assertion 3: Passed');

    fs.unlinkSync(zipFilePath); // Clean up
  });

  it('should process array values correctly', function() {
    assert.strictEqual(processTagValue('simple text'), 'simple text');
    console.log('Assertion 4: Passed');
    
    assert.strictEqual(processTagValue({ text: 'text object' }), 'text object');
    console.log('Assertion 5: Passed');
    
    assert.strictEqual(processTagValue(['item1', 'item2']), '1. item1\n2. item2');
    console.log('Assertion 6: Passed');
    
    assert.strictEqual(processTagValue([{ text: 'object item' }]), '1. object item');
    console.log('Assertion 7: Passed');
  });

  it('should replace placeholders in the document content', function() {
    const updatedContent = replacePlaceholder(mockDocumentContent, jsonContent);
    assert(updatedContent.includes('<w:t>123c</w:t>'));
    console.log('Assertion 8: Passed');
    
    assert(updatedContent.includes('<w:t>kashish</w:t>'));
    console.log('Assertion 9: Passed');
    
    assert(updatedContent.includes('<w:t>01/07/2024</w:t>'));
    console.log('Assertion 10: Passed');
  });

});
