postdata.js
const AdmZip = require('adm-zip');
const { DOMParser, XMLSerializer } = require('@xmldom/xmldom');
const xpath = require('xpath');

function readZipFile(zipFilePath, fileName) {
  const zip = new AdmZip(zipFilePath);
  const zipEntry = zip.getEntry(fileName);
  if (!zipEntry) {
    throw new Error(`Entry not found: ${fileName}`);
  }
  return zipEntry.getData().toString('utf8');
}


function writeZipFile(zipFilePath, fileName, content) {
  const zip = new AdmZip(zipFilePath);
  zip.updateFile(fileName, Buffer.from(content, 'utf8'));
  zip.writeZip(zipFilePath);
}


function processTagValue(value) {
  if (Array.isArray(value)) {
    return value.map((item, index) => `${index + 1}. ${item.text || item}`).join('\n');
  }
  if (typeof value === 'object' && value !== null) {
    return value.text || '';
  }
  return String(value);
}


function replacePlaceholder(documentContent, data) {
  if (!documentContent || !data) {
    return ''; // Return empty string for undefined inputs
  }

  const doc = new DOMParser().parseFromString(documentContent, 'application/xml');
  const select = xpath.useNamespaces({ w: 'http://schemas.openxmlformats.org/wordprocessingml/2006/main' });

  const placeholders = select('//w:sdt', doc);
  placeholders.forEach((placeholder) => {
    const tag = select('string(.//w:tag/@w:val)', placeholder);
    if (data[tag]) {
      const textNode = select('.//w:t', placeholder)[0];
      if (textNode) {
        textNode.textContent = processTagValue(data[tag]);
      }
    }
  });

  return new XMLSerializer().serializeToString(doc);
}


function processDocument(zipFilePath, data) {
  const fileName = 'word/document.xml';
  const documentContent = readZipFile(zipFilePath, fileName);
  const updatedContent = replacePlaceholder(documentContent, data);
  writeZipFile(zipFilePath, fileName, updatedContent);
}

module.exports = {
  readZipFile,
  writeZipFile,
  processTagValue,
  replacePlaceholder,
  processDocument,
};

posttest.js

const fs = require('fs');
const AdmZip = require('adm-zip');
const { v4: uuidv4 } = require('uuid');
const { DOMParser, XMLSerializer } = require('@xmldom/xmldom');
const xpath = require('xpath');
const assert = require('assert');

const { processDocument, readZipFile, writeZipFile, processTagValue, replacePlaceholder } = require('./PostData'); // replace with actual path

// Mock data
const jsonContent = {
  "Incident num": "123c",
  "authors": "kashish",
  "date": "01/07/2024"
};

const mockDocumentContent = `
<w:document xmlns:w="http://schemas.openxmlformats.org/wordprocessingml/2006/main">
  <w:body>
    <w:sdt>
      <w:sdtPr>
        <w:tag w:val="Incident num"/>
      </w:sdtPr>
      <w:sdtContent>
        <w:r>
          <w:t>Placeholder</w:t>
        </w:r>
      </w:sdtContent>
    </w:sdt>
    <w:sdt>
      <w:sdtPr>
        <w:tag w:val="authors"/>
      </w:sdtPr>
      <w:sdtContent>
        <w:r>
          <w:t>Placeholder</w:t>
        </w:r>
      </w:sdtContent>
    </w:sdt>
    <w:sdt>
      <w:sdtPr>
        <w:tag w:val="date"/>
      </w:sdtPr>
      <w:sdtContent>
        <w:r>
          <w:t>Placeholder</w:t>
        </w:r>
      </w:sdtContent>
    </w:sdt>
  </w:body>
</w:document>`;

describe('Document Processing Functions', function() {

  it('should read the content of an existing file in a zip archive', function() {
    const zip = new AdmZip();
    const fileName = 'test.txt';
    zip.addFile(fileName, Buffer.from('Test content', 'utf8'));
    const zipFilePath = `./${uuidv4()}.zip`;
    zip.writeZip(zipFilePath);

    const content = readZipFile(zipFilePath, fileName);
    assert.strictEqual(content, 'Test content');

    fs.unlinkSync(zipFilePath); // Clean up
  });

  it('should throw an error if the file does not exist in the zip archive', function() {
    const zip = new AdmZip();
    const zipFilePath = `./${uuidv4()}.zip`;
    zip.writeZip(zipFilePath);

    assert.throws(() => {
      readZipFile(zipFilePath, 'nonexistent.txt');
    }, /Entry not found/);

    fs.unlinkSync(zipFilePath); // Clean up
  });

  it('should update the content of a file in a zip archive', function() {
    const zip = new AdmZip();
    const fileName = 'test.txt';
    zip.addFile(fileName, Buffer.from('Old content', 'utf8'));
    const zipFilePath = `./${uuidv4()}.zip`;
    zip.writeZip(zipFilePath);

    writeZipFile(zipFilePath, fileName, 'New content');
    const content = readZipFile(zipFilePath, fileName);
    assert.strictEqual(content, 'New content');

    fs.unlinkSync(zipFilePath); // Clean up
  });

  it('should process simple text values correctly', function() {
    assert.strictEqual(processTagValue('simple text'), 'simple text');
  });

  it('should process text object values correctly', function() {
    assert.strictEqual(processTagValue({ text: 'text object' }), 'text object');
  });

  it('should process array of items correctly', function() {
    assert.strictEqual(processTagValue(['item1', 'item2']), '1. item1\n2. item2');
  });

  it('should process array of objects correctly', function() {
    assert.strictEqual(processTagValue([{ text: 'object item' }]), '1. object item');
  });

  it('should replace placeholders in the document content', function() {
    const updatedContent = replacePlaceholder(mockDocumentContent, jsonContent);
    assert(updatedContent.includes('<w:t>123c</w:t>'));
    assert(updatedContent.includes('<w:t>kashish</w:t>'));
    assert(updatedContent.includes('<w:t>01/07/2024</w:t>'));
  });
  it('should handle empty input gracefully', function() {
    const updatedContent = replacePlaceholder('', {});
    assert.strictEqual(updatedContent, '');
  
    const emptyJson = {};
    const emptyDoc = '<w:document></w:document>';
    const updatedEmpty = replacePlaceholder(emptyDoc, emptyJson);
    assert.strictEqual(updatedEmpty, '<w:document></w:document>');
  });
  
 

  it('should handle undefined input without errors', function() {
    const updatedContent = replacePlaceholder(undefined, undefined);
    assert.strictEqual(updatedContent, '');
  });

  it('should handle non-existent tags in the document', function() {
    const mockContentNoTags = `
      <w:document xmlns:w="http://schemas.openxmlformats.org/wordprocessingml/2006/main">
        <w:body>
          <w:sdt>
            <w:sdtPr>
              <w:tag w:val="nonexistent_tag"/>
            </w:sdtPr>
            <w:sdtContent>
              <w:r>
                <w:t>Placeholder</w:t>
              </w:r>
            </w:sdtContent>
          </w:sdt>
        </w:body>
      </w:document>`;

    const updatedContent = replacePlaceholder(mockContentNoTags, jsonContent);
    assert(updatedContent.includes('<w:t>Placeholder</w:t>')); // Placeholder should remain unchanged
  });

});

Z:\Desktop\work-addin>npx mocha posttest.js


  Document Processing Functions
    √ should read the content of an existing file in a zip archive (58ms)
    √ should throw an error if the file does not exist in the zip archive (115ms)
    √ should update the content of a file in a zip archive (146ms)
    √ should process simple text values correctly
    √ should process text object values correctly
    √ should process array of items correctly
    √ should process array of objects correctly
    √ should replace placeholders in the document content
    1) should handle empty input gracefully
    √ should handle undefined input without errors
    √ should handle non-existent tags in the document


  10 passing (349ms)
  1 failing

  1) Document Processing Functions
       should handle empty input gracefully:

      AssertionError [ERR_ASSERTION]: Expected values to be strictly equal:
+ actual - expected

+ '<w:document/>'
- '<w:document></w:document>'
              ^
      + expected - actual

      -<w:document/>
      +<w:document></w:document>

      at Context.<anonymous> (posttest.js:232:12)
      at process.processImmediate (node:internal/timers:478:21)
