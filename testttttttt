const fs = require('fs');
const AdmZip = require('adm-zip');
const { v4: uuidv4 } = require('uuid');
const { DOMParser, XMLSerializer } = require('@xmldom/xmldom');
const xpath = require('xpath');
const assert = require('assert');

const { processDocument, readZipFile, writeZipFile, processTagValue, replacePlaceholder } = require('./path_to_your_module'); // replace with actual path

// Mock data
const jsonContent = {
  "Incident num": "123c",
  "authors": "kashish",
  "date": "01/07/2024"
};

const mockDocumentContent = `
<w:document xmlns:w="http://schemas.openxmlformats.org/wordprocessingml/2006/main">
  <w:body>
    <w:sdt>
      <w:sdtPr>
        <w:tag w:val="Incident num"/>
      </w:sdtPr>
      <w:sdtContent>
        <w:r>
          <w:t>Placeholder</w:t>
        </w:r>
      </w:sdtContent>
    </w:sdt>
    <w:sdt>
      <w:sdtPr>
        <w:tag w:val="authors"/>
      </w:sdtPr>
      <w:sdtContent>
        <w:r>
          <w:t>Placeholder</w:t>
        </w:r>
      </w:sdtContent>
    </w:sdt>
    <w:sdt>
      <w:sdtPr>
        <w:tag w:val="date"/>
      </w:sdtPr>
      <w:sdtContent>
        <w:r>
          <w:t>Placeholder</w:t>
        </w:r>
      </w:sdtContent>
    </w:sdt>
  </w:body>
</w:document>`;

// Tests

// Test readZipFile
const testReadZipFile = () => {
  const zip = new AdmZip();
  const fileName = 'test.txt';
  zip.addFile(fileName, Buffer.from('Test content', 'utf8'));
  const zipFilePath = `./${uuidv4()}.zip`;
  zip.writeZip(zipFilePath);

  const content = readZipFile(zipFilePath, fileName);
  assert.strictEqual(content, 'Test content');

  fs.unlinkSync(zipFilePath); // Clean up
  console.log('readZipFile test passed');
};

// Test writeZipFile
const testWriteZipFile = () => {
  const zip = new AdmZip();
  const fileName = 'test.txt';
  zip.addFile(fileName, Buffer.from('Old content', 'utf8'));
  const zipFilePath = `./${uuidv4()}.zip`;
  zip.writeZip(zipFilePath);

  writeZipFile(zipFilePath, fileName, 'New content');
  const content = readZipFile(zipFilePath, fileName);
  assert.strictEqual(content, 'New content');

  fs.unlinkSync(zipFilePath); // Clean up
  console.log('writeZipFile test passed');
};

// Test processTagValue
const testProcessTagValue = () => {
  assert.strictEqual(processTagValue('simple text'), 'simple text');
  assert.strictEqual(processTagValue({ text: 'text object' }), 'text object');
  assert.strictEqual(processTagValue(['item1', 'item2']), '1. item1\n2. item2');
  assert.strictEqual(processTagValue([{ text: 'object item' }]), '1. object item');
  console.log('processTagValue test passed');
};

// Test replacePlaceholder
const testReplacePlaceholder = () => {
  const updatedContent = replacePlaceholder(mockDocumentContent, jsonContent);
  assert(updatedContent.includes('<w:t>123c</w:t>'));
  assert(updatedContent.includes('<w:t>kashish</w:t>'));
  assert(updatedContent.includes('<w:t>01/07/2024</w:t>'));
  console.log('replacePlaceholder test passed');
};

// Run tests
testReadZipFile();
testWriteZipFile();
testProcessTagValue();
testReplacePlaceholder();

console.log('All tests passed');
