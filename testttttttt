const fs = require('fs');
const AdmZip = require('adm-zip');
const { v4: uuidv4 } = require('uuid');
const assert = require('assert');

const { processDocument, readZipFile, writeZipFile, processTagValue, replacePlaceholder } = require('./PostData');

// Mock data
const jsonContent = {
  "Incident num": "123c",
  "authors": "kashish",
  "date": "01/07/2024"
};

const mockDocumentContent = `
<w:document xmlns:w="http://schemas.openxmlformats.org/wordprocessingml/2006/main">
  <w:body>
    <w:sdt>
      <w:sdtPr>
        <w:tag w:val="Incident num"/>
      </w:sdtPr>
      <w:sdtContent>
        <w:r>
          <w:t>Placeholder</w:t>
        </w:r>
      </w:sdtContent>
    </w:sdt>
    <w:sdt>
      <w:sdtPr>
        <w:tag w:val="authors"/>
      </w:sdtPr>
      <w:sdtContent>
        <w:r>
          <w:t>Placeholder</w:t>
        </w:r>
      </w:sdtContent>
    </w:sdt>
    <w:sdt>
      <w:sdtPr>
        <w:tag w:val="date"/>
      </w:sdtPr>
      <w:sdtContent>
        <w:r>
          <w:t>Placeholder</w:t>
        </w:r>
      </w:sdtContent>
    </w:sdt>
  </w:body>
</w:document>`;

describe('Document Processing Functions', function() {
  
  it('should read the content of an existing file in a zip archive', function() {
    const zip = new AdmZip();
    const fileName = 'test.txt';
    zip.addFile(fileName, Buffer.from('Test content', 'utf8'));
    const zipFilePath = `./${uuidv4()}.zip`;
    zip.writeZip(zipFilePath);

    const content = readZipFile(zipFilePath, fileName);
    assert.strictEqual(content, 'Test content');
    console.log('readZipFile: Content read correctly.');

    fs.unlinkSync(zipFilePath); // Clean up
  });

  it('should throw an error if the file does not exist in the zip archive', function() {
    const zip = new AdmZip();
    const zipFilePath = `./${uuidv4()}.zip`;
    zip.writeZip(zipFilePath);

    assert.throws(() => {
      readZipFile(zipFilePath, 'nonexistent.txt');
    }, /Entry not found/);
    console.log('readZipFile: Correctly threw error for non-existent file.');

    fs.unlinkSync(zipFilePath); // Clean up
  });

  it('should update the content of a file in a zip archive', function() {
    const zip = new AdmZip();
    const fileName = 'word/document.xml';
    zip.addFile(fileName, Buffer.from(mockDocumentContent, 'utf8'));
    const zipFilePath = `./${uuidv4()}.zip`;
    zip.writeZip(zipFilePath);

    const newContent = `
    <w:document xmlns:w="http://schemas.openxmlformats.org/wordprocessingml/2006/main">
      <w:body>
        <w:p>
          <w:r>
            <w:t>New content</w:t>
          </w:r>
        </w:p>
      </w:body>
    </w:document>`;

    writeZipFile(zipFilePath, fileName, newContent);
    const content = readZipFile(zipFilePath, fileName);
    assert(content.includes('<w:t>New content</w:t>'));
    console.log('writeZipFile: Content updated correctly.');

    fs.unlinkSync(zipFilePath); // Clean up
  });

  it('should process array values correctly', function() {
    assert.strictEqual(processTagValue('simple text'), 'simple text');
    console.log('processTagValue: Processed simple text correctly.');

    assert.strictEqual(processTagValue({ text: 'text object' }), 'text object');
    console.log('processTagValue: Processed text object correctly.');

    assert.strictEqual(processTagValue(['item1', 'item2']), '1. item1\n2. item2');
    console.log('processTagValue: Processed array values correctly.');

    assert.strictEqual(processTagValue([{ text: 'object item' }]), '1. object item');
    console.log('processTagValue: Processed array of text objects correctly.');
  });

  it('should replace placeholders in the document content', function() {
    const updatedContent = replacePlaceholder(mockDocumentContent, jsonContent);
    assert(updatedContent.includes('<w:t>123c</w:t>'));
    console.log('replacePlaceholder: Replaced Incident num correctly.');

    assert(updatedContent.includes('<w:t>kashish</w:t>'));
    console.log('replacePlaceholder: Replaced authors correctly.');

    assert(updatedContent.includes('<w:t>01/07/2024</w:t>'));
    console.log('replacePlaceholder: Replaced date correctly.');
  });

  it('should create a sample DOCX file with the updated content', function() {
    const zip = new AdmZip();
    const fileName = 'word/document.xml';
    zip.addFile(fileName, Buffer.from(mockDocumentContent, 'utf8'));
    const newFileName = `./updated_${uuidv4()}.docx`;
    zip.writeZip(newFileName);

    processDocument(newFileName, jsonContent);

    const content = readZipFile(newFileName, fileName);
    assert(content.includes('<w:t>123c</w:t>'));
    console.log('processDocument: Replaced Incident num in the sample DOCX correctly.');

    assert(content.includes('<w:t>kashish</w:t>'));
    console.log('processDocument: Replaced authors in the sample DOCX correctly.');

    assert(content.includes('<w:t>01/07/2024</w:t>'));
    console.log('processDocument: Replaced date in the sample DOCX correctly.');

    // Write the sample DOCX to disk
    const outputPath = './sample.docx';
    fs.writeFileSync(outputPath, zip.toBuffer());
    console.log('Sample DOCX created at:', outputPath);

    fs.unlinkSync(newFileName); // Clean up


      const templateFilePath = './Test Document.docx';
  

  
  fs.copyFileSync(templateFilePath, newFileName);

  const documentContent = readZipFile(newFileName, fileName);
  const updatedContent = replacePlaceholder(documentContent, jsonContent);
  writeZipFile(newFileName, fileName, updatedContent);

  return newFileName;

  });

});
