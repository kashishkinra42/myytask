const fs = require('fs');
const AdmZip = require('adm-zip');
const assert = require('assert');
const { DOMParser, XMLSerializer } = require('@xmldom/xmldom');
const { processTagValue, readZipFile, writeZipFile, replacePlaceholder, processDocument } = require('../your-module-file'); // Update with your actual module path

// Test data
const sampleXml = `
<w:document xmlns:w="http://schemas.openxmlformats.org/wordprocessingml/2006/main">
  <w:body>
    <w:sdt>
      <w:sdtPr>
        <w:tag w:val="sampleTag"/>
      </w:sdtPr>
      <w:sdtContent>
        <w:t>Placeholder</w:t>
      </w:sdtContent>
    </w:sdt>
  </w:body>
</w:document>
`.trim();

const jsonContent = {
  sampleTag: "Replaced text"
};

describe('Document Processing Functions', () => {
  
  // Tests for processTagValue
  it('processTagValue should return concatenated strings for an array of strings', () => {
    const result = processTagValue(["item1", "item2"]);
    assert.strictEqual(result, '1. item1\n2. item2');
  });

  it('processTagValue should return text from an object with a text property', () => {
    const result = processTagValue({ text: "sample text" });
    assert.strictEqual(result, 'sample text');
  });

  it('processTagValue should return the input if it is a plain string', () => {
    const result = processTagValue("plain text");
    assert.strictEqual(result, 'plain text');
  });

  it('processTagValue should return an empty string for unrecognized input', () => {
    const result = processTagValue({ someKey: "someValue" });
    assert.strictEqual(result, '');
  });

  // Tests for readZipFile
  it('readZipFile should read the correct file content from the zip', () => {
    const zip = new AdmZip();
    zip.addFile('test/document.xml', Buffer.from(sampleXml, 'utf8'));
    zip.writeZip('test.zip');

    const content = readZipFile('test.zip', 'test/document.xml');
    assert.strictEqual(content.trim(), sampleXml);

    fs.unlinkSync('test.zip'); // Cleanup
  });

  // Tests for writeZipFile
  it('writeZipFile should write the correct file content to the zip', () => {
    const zip = new AdmZip();
    zip.addFile('test/document.xml', Buffer.from('Old content', 'utf8'));
    zip.writeZip('test.zip');

    writeZipFile('test.zip', 'test/document.xml', sampleXml);

    const content = readZipFile('test.zip', 'test/document.xml');
    assert.strictEqual(content.trim(), sampleXml);

    fs.unlinkSync('test.zip'); // Cleanup
  });

  // Tests for replacePlaceholder
  it('replacePlaceholder should replace placeholders with provided JSON content', () => {
    const updatedContent = replacePlaceholder(sampleXml, jsonContent);
    const expectedContent = `
<w:document xmlns:w="http://schemas.openxmlformats.org/wordprocessingml/2006/main">
  <w:body>
    <w:sdt>
      <w:sdtPr>
        <w:tag w:val="sampleTag"/>
      </w:sdtPr>
      <w:sdtContent>
        <w:t>Replaced text</w:t>
      </w:sdtContent>
    </w:sdt>
  </w:body>
</w:document>
`.trim();
    assert.strictEqual(updatedContent.trim(), expectedContent);
  });

  it('replacePlaceholder should handle empty JSON content gracefully', () => {
    const updatedContent = replacePlaceholder(sampleXml, {});
    assert.strictEqual(updatedContent.trim(), sampleXml);
  });

  it('replacePlaceholder should handle missing tag values in JSON content gracefully', () => {
    const updatedContent = replacePlaceholder(sampleXml, { differentTag: "Different text" });
    assert.strictEqual(updatedContent.trim(), sampleXml);
  });

  // Tests for processDocument
  it('processDocument should process the document and produce a new file', async () => {
    // Setup: Create a sample docx with necessary structure
    const zip = new AdmZip();
    zip.addFile('word/document.xml', Buffer.from(sampleXml, 'utf8'));
    zip.writeZip('Test Document.docx');

    const newFileName = await processDocument(jsonContent);

    const content = readZipFile(newFileName, 'word/document.xml');
    const expectedContent = replacePlaceholder(sampleXml, jsonContent);

    assert.strictEqual(content.trim(), expectedContent.trim());

    // Cleanup
    fs.unlinkSync('Test Document.docx');
    fs.unlinkSync(newFileName);
  });

  it('processDocument should handle missing template file gracefully', async () => {
    try {
      await processDocument(jsonContent);
      assert.fail('Expected error was not thrown');
    } catch (error) {
      assert.strictEqual(error.code, 'ENOENT');
    }
  });

});
