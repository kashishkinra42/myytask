Z:\Desktop\work-addin>npx mocha posttest.js


  Document Processing Functions
    1) processTagValue should return concatenated strings for an array of strings
    2) processTagValue should return text from an object with a text property
    3) processTagValue should return the input if it is a plain string
    4) processTagValue should return an empty string for unrecognized input
    5) readZipFile should read the correct file content from the zip
    6) writeZipFile should write the correct file content to the zip
    7) replacePlaceholder should replace placeholders with provided JSON content
    8) replacePlaceholder should handle empty JSON content gracefully
    9) replacePlaceholder should handle missing tag values in JSON content gracefully
    10) processDocument should process the document and produce a new file
processDocument error: TypeError: Cannot read properties of null (reading 'getData')
    at readZipFile (Z:\Desktop\work-addin\PostData.js:91:28)
    at processDocument (Z:\Desktop\work-addin\PostData.js:168:27)
    at Context.<anonymous> (Z:\Desktop\work-addin\posttest.js:137:13)
    at callFn (Z:\Desktop\work-addin\node_modules\mocha\lib\runnable.js:366:21)
    at Runnable.run (Z:\Desktop\work-addin\node_modules\mocha\lib\runnable.js:354:5)
    at Runner.runTest (Z:\Desktop\work-addin\node_modules\mocha\lib\runner.js:677:10)
    at Z:\Desktop\work-addin\node_modules\mocha\lib\runner.js:800:12
    at next (Z:\Desktop\work-addin\node_modules\mocha\lib\runner.js:592:14)
    at Z:\Desktop\work-addin\node_modules\mocha\lib\runner.js:602:7
    at next (Z:\Desktop\work-addin\node_modules\mocha\lib\runner.js:485:14)
    at Immediate.<anonymous> (Z:\Desktop\work-addin\node_modules\mocha\lib\runner.js:570:5)
    at process.processImmediate (node:internal/timers:478:21)
    11) processDocument should handle missing template file gracefully


  0 passing (498ms)
  11 failing

  1) Document Processing Functions
       processTagValue should return concatenated strings for an array of strings:
     TypeError: processTagValue is not a function
      at Context.<anonymous> (posttest.js:31:20)
      at process.processImmediate (node:internal/timers:478:21)

  2) Document Processing Functions
       processTagValue should return text from an object with a text property:
     TypeError: processTagValue is not a function
      at Context.<anonymous> (posttest.js:37:20)
      at process.processImmediate (node:internal/timers:478:21)

  3) Document Processing Functions
       processTagValue should return the input if it is a plain string:
     TypeError: processTagValue is not a function
      at Context.<anonymous> (posttest.js:43:20)
      at process.processImmediate (node:internal/timers:478:21)

  4) Document Processing Functions
       processTagValue should return an empty string for unrecognized input:
     TypeError: processTagValue is not a function
      at Context.<anonymous> (posttest.js:49:20)
      at process.processImmediate (node:internal/timers:478:21)

  5) Document Processing Functions
       readZipFile should read the correct file content from the zip:
     TypeError: readZipFile is not a function
      at Context.<anonymous> (posttest.js:60:21)
      at process.processImmediate (node:internal/timers:478:21)

  6) Document Processing Functions
       writeZipFile should write the correct file content to the zip:
     TypeError: writeZipFile is not a function
      at Context.<anonymous> (posttest.js:73:5)
      at process.processImmediate (node:internal/timers:478:21)

  7) Document Processing Functions
       replacePlaceholder should replace placeholders with provided JSON content:
     TypeError: replacePlaceholder is not a function
      at Context.<anonymous> (posttest.js:84:28)
      at process.processImmediate (node:internal/timers:478:21)

  8) Document Processing Functions
       replacePlaceholder should handle empty JSON content gracefully:
     TypeError: replacePlaceholder is not a function
      at Context.<anonymous> (posttest.js:104:28)
      at process.processImmediate (node:internal/timers:478:21)

  9) Document Processing Functions
       replacePlaceholder should handle missing tag values in JSON content gracefully:
     TypeError: replacePlaceholder is not a function
      at Context.<anonymous> (posttest.js:110:28)
      at process.processImmediate (node:internal/timers:478:21)

  10) Document Processing Functions
       processDocument should process the document and produce a new file:
     TypeError: Cannot read properties of null (reading 'getData')
      at readZipFile (PostData.js:91:28)
      at processDocument (PostData.js:168:27)
      at Context.<anonymous> (posttest.js:122:31)
      at process.processImmediate (node:internal/timers:478:21)

  11) Document Processing Functions
       processDocument should handle missing template file gracefully:
     AssertionError [ERR_ASSERTION]: Expected values to be strictly equal:
+ actual - expected

+ undefined
- 'ENOENT'
      at Context.<anonymous> (posttest.js:141:14)

where the code is :- 
const fs = require('fs');
const AdmZip = require('adm-zip');
const assert = require('assert');
const { DOMParser, XMLSerializer } = require('@xmldom/xmldom');
const { processTagValue, readZipFile, writeZipFile, replacePlaceholder, processDocument } = require('./PostData'); // Update this path

// Test data
const sampleXml = `
<w:document xmlns:w="http://schemas.openxmlformats.org/wordprocessingml/2006/main">
  <w:body>
    <w:sdt>
      <w:sdtPr>
        <w:tag w:val="sampleTag"/>
      </w:sdtPr>
      <w:sdtContent>
        <w:t>Placeholder</w:t>
      </w:sdtContent>
    </w:sdt>
  </w:body>
</w:document>
`.trim();

const jsonContent = {
  sampleTag: "Replaced text"
};

describe('Document Processing Functions', () => {
  
  // Tests for processTagValue
  it('processTagValue should return concatenated strings for an array of strings', () => {
    const result = processTagValue(["item1", "item2"]);
    console.log('processTagValue result:', result); // Logging
    assert.strictEqual(result, '1. item1\n2. item2');
  });

  it('processTagValue should return text from an object with a text property', () => {
    const result = processTagValue({ text: "sample text" });
    console.log('processTagValue result:', result); // Logging
    assert.strictEqual(result, 'sample text');
  });

  it('processTagValue should return the input if it is a plain string', () => {
    const result = processTagValue("plain text");
    console.log('processTagValue result:', result); // Logging
    assert.strictEqual(result, 'plain text');
  });

  it('processTagValue should return an empty string for unrecognized input', () => {
    const result = processTagValue({ someKey: "someValue" });
    console.log('processTagValue result:', result); // Logging
    assert.strictEqual(result, '');
  });

  // Tests for readZipFile
  it('readZipFile should read the correct file content from the zip', () => {
    const zip = new AdmZip();
    zip.addFile('test/document.xml', Buffer.from(sampleXml, 'utf8'));
    zip.writeZip('test.zip');

    const content = readZipFile('test.zip', 'test/document.xml');
    console.log('readZipFile content:', content); // Logging
    assert.strictEqual(content.trim(), sampleXml);

    fs.unlinkSync('test.zip'); // Cleanup
  });

  // Tests for writeZipFile
  it('writeZipFile should write the correct file content to the zip', () => {
    const zip = new AdmZip();
    zip.addFile('test/document.xml', Buffer.from('Old content', 'utf8'));
    zip.writeZip('test.zip');

    writeZipFile('test.zip', 'test/document.xml', sampleXml);

    const content = readZipFile('test.zip', 'test/document.xml');
    console.log('writeZipFile content:', content); // Logging
    assert.strictEqual(content.trim(), sampleXml);

    fs.unlinkSync('test.zip'); // Cleanup
  });

  // Tests for replacePlaceholder
  it('replacePlaceholder should replace placeholders with provided JSON content', () => {
    const updatedContent = replacePlaceholder(sampleXml, jsonContent);
    console.log('replacePlaceholder updatedContent:', updatedContent); // Logging
    const expectedContent = `
<w:document xmlns:w="http://schemas.openxmlformats.org/wordprocessingml/2006/main">
  <w:body>
    <w:sdt>
      <w:sdtPr>
        <w:tag w:val="sampleTag"/>
      </w:sdtPr>
      <w:sdtContent>
        <w:t>Replaced text</w:t>
      </w:sdtContent>
    </w:sdt>
  </w:body>
</w:document>
`.trim();
    assert.strictEqual(updatedContent.trim(), expectedContent);
  });

  it('replacePlaceholder should handle empty JSON content gracefully', () => {
    const updatedContent = replacePlaceholder(sampleXml, {});
    console.log('replacePlaceholder with empty JSON content:', updatedContent); // Logging
    assert.strictEqual(updatedContent.trim(), sampleXml);
  });

  it('replacePlaceholder should handle missing tag values in JSON content gracefully', () => {
    const updatedContent = replacePlaceholder(sampleXml, { differentTag: "Different text" });
    console.log('replacePlaceholder with missing tag values:', updatedContent); // Logging
    assert.strictEqual(updatedContent.trim(), sampleXml);
  });

  // Tests for processDocument
  it('processDocument should process the document and produce a new file', async () => {
    // Setup: Create a sample docx with necessary structure
    const zip = new AdmZip();
    zip.addFile('word/document.xml', Buffer.from(sampleXml, 'utf8'));
    zip.writeZip('Test Document.docx');

    const newFileName = await processDocument(jsonContent);

    const content = readZipFile(newFileName, 'word/document.xml');
    const expectedContent = replacePlaceholder(sampleXml, jsonContent);

    console.log('processDocument content:', content); // Logging
    assert.strictEqual(content.trim(), expectedContent.trim());

    // Cleanup
    fs.unlinkSync('Test Document.docx');
    fs.unlinkSync(newFileName);
  });

  it('processDocument should handle missing template file gracefully', async () => {
    try {
      await processDocument(jsonContent);
      assert.fail('Expected error was not thrown');
    } catch (error) {
      console.log('processDocument error:', error); // Logging
      assert.strictEqual(error.code, 'ENOENT');
    }
  });

});
