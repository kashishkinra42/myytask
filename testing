index.js

// Route for updating document
    app.route('/api/v1/service-now/integrations/document/update')
        .post(bodyParser.json({"type" : "*/*"}), controller.updateDocument);

// Route for extracting tags
    app.route('/api/v1/service-now/integrations/document/extract-tags')
        .post(upload.single('Docxfile'), controller.extractTags);

controller.js
// Controller functions


const fs = require('fs');
const JSZip = require('jszip');
const xml2js = require('xml2js');
const path = require('path');
const { v4: uuidv4 } = require('uuid');
const { DOMParser, XMLSerializer } = require('@xmldom/xmldom');
const xpath = require('xpath');
const AdmZip = require('adm-zip');

// Helper function for logging
const log = (message) => {
  console.log(`[${new Date().toISOString()}] ${message}`);
};

// Functions to handle file reading, extracting, and replacing content
const readFileContent = async (filePath) => {
  return fs.promises.readFile(filePath);
};

const extractXmlFromZip = async (data) => {
  const zip = await JSZip.loadAsync(data);
  return zip.file('word/document.xml').async('text');
};

const parseXml = async (xmlContent) => {
  const parser = new xml2js.Parser();
  return parser.parseStringPromise(xmlContent);
};

const traverseNodes = (node, tags) => {
  if (node['w:sdt']) {
    node['w:sdt'].forEach(sdt => {
      const sdtPr = sdt['w:sdtPr'] && Array.isArray(sdt['w:sdtPr']) ? sdt['w:sdtPr'][0] : null;
      const tag = sdtPr && sdtPr['w:tag'] && Array.isArray(sdtPr['w:tag']) ? sdtPr['w:tag'][0] : null;
      if (tag && tag['$'] && tag['$']['w:val']) {
        const tagName = tag['$']['w:val'];
        const sdtContent = sdt['w:sdtContent'] && Array.isArray(sdt['w:sdtContent']) ? sdt['w:sdtContent'][0] : null;
        const tagValue = sdtContent ? extractTagValue(sdtContent) : '';
        if (tagValue.trim() !== '') {
          tags[tagName] = tagValue;
        }
      }
    });
  }
  Object.values(node).forEach(value => {
    if (Array.isArray(value)) {
      value.forEach(child => traverseNodes(child, tags));
    }
  });
};

const extractTagValue = (content) => {
  let text = '';
  let listItems = [];

  function traverseContent(contentNode) {
    if (contentNode['w:p']) {
      contentNode['w:p'].forEach(pNode => {
        if (pNode['w:pPr'] && pNode['w:pPr'][0]['w:numPr']) {
          const listItem = extractTextFromNode(pNode);
          if (typeof listItem === 'string' && listItem.trim() !== '') {
            listItems.push(listItem);
          } else if (typeof listItem === 'object' && listItem.text.trim() !== '') {
            listItems.push(listItem);
          }
        } else {
          const pText = extractTextFromNode(pNode);
          if (typeof pText === 'string' && pText.trim() !== '') {
            text += pText;
          } else if (typeof pText === 'object' && pText.text.trim() !== '') {
            text += pText.text;
          }
        }
      });
    }
    Object.values(contentNode).forEach(value => {
      if (Array.isArray(value)) {
        value.forEach(child => traverseContent(child));
      }
    });
  }

  function extractTextFromNode(node) {
    let nodeText = '';
    if (node['w:r']) {
      node['w:r'].forEach(rNode => {
        if (rNode['w:t']) {
          rNode['w:t'].forEach(textNode => {
            if (typeof textNode === 'string') {
              nodeText += textNode;
            } else if (textNode['_']) {
              nodeText += textNode['_'];
            }
          });
        }
      });
    }
    return nodeText;
  }

  traverseContent(content);

  if (listItems.length > 0) {
    return listItems;
  } else {
    return text;
  }
};

const extractTagsFromBody = (body) => {
  const tags = {};

  function traverseNodes(node) {
    if (node['w:sdt']) {
      node['w:sdt'].forEach(sdt => {
        const tag = sdt['w:sdtPr'][0]['w:tag'];
        if (tag && tag[0]['$'] && tag[0]['$']['w:val']) {
          const tagName = tag[0]['$']['w:val'];
          const tagValue = extractTagValue(sdt['w:sdtContent'][0]);
          if (typeof tagValue === 'string' && tagValue.trim() !== '') {
            tags[tagName] = tagValue;
          } else if (Array.isArray(tagValue) && tagValue.length > 0) {
            tags[tagName] = tagValue;
          }
        }
      });
    }
    Object.values(node).forEach(value => {
      if (Array.isArray(value)) {
        value.forEach(child => traverseNodes(child));
      }
    });
  }

  traverseNodes(body);
  return tags;
};

const extractContentControlTags = async (filePath) => {
  try {
    const data = await readFileContent(filePath);
    const documentXml = await extractXmlFromZip(data);
    const xmlParsed = await parseXml(documentXml);

    const tags = extractTagsFromBody(xmlParsed['w:document']['w:body'][0]);

    return tags;
  } catch (error) {
    console.error('Error:', error);
    throw error;
  }
};

const readZipFile = (zipFilePath, fileName) => {
  const zip = new AdmZip(zipFilePath);
  const zipEntry = zip.getEntry(fileName);
  const content = zipEntry.getData().toString('utf8');
  return content;
};

const writeZipFile = (zipFilePath, fileName, content) => {
  const zip = new AdmZip(zipFilePath);
  zip.updateFile(fileName, Buffer.from(content, 'utf8'));
  zip.writeZip(zipFilePath);
};

const processTagValue = (value) => {
  if (Array.isArray(value)) {
    return value.map((item, index) => {
      if (typeof item === 'string') {
        return `${index + 1}. ${item}`;
      } else if (typeof item === 'object' && item.text) {
        return `${index + 1}. ${item.text}`;
      }
      return '';
    }).join('\n');
  } else if (typeof value === 'object' && value.text) {
    return value.text;
  }
  return value;
};

const replacePlaceholder = (documentContent, jsonContent) => {
  log('Entering replacePlaceholder');
  const doc = new DOMParser().parseFromString(documentContent, 'text/xml');
  const select = xpath.useNamespaces({ "w": "http://schemas.openxmlformats.org/wordprocessingml/2006/main" });

  select("//w:sdt", doc).forEach(node => {
    const tagNode = select('.//w:tag/@w:val', node)[0];
    if (tagNode) {
      const tagName = tagNode.value;
      log(`Processing tag: ${tagName}`);
      if (jsonContent.hasOwnProperty(tagName)) {
        const textNodes = select('.//w:t', node);
        if (textNodes.length > 0) {
          const processedValue = processTagValue(jsonContent[tagName]);
          const parts = processedValue.split('\n');

          textNodes.forEach((textNode, index) => {
            if (index === 0) {
              textNode.textContent = parts[0];
            } else {
              textNode.parentNode.removeChild(textNode);
            }
          });

          for (let i = 1; i < parts.length; i++) {
            const breakNode = doc.createElement('w:br');
            const newTextNode = doc.createElement('w:t');
            newTextNode.textContent = parts[i];
            textNodes[0].parentNode.appendChild(breakNode);
            textNodes[0].parentNode.appendChild(newTextNode);
          }
        }
      }
    }
  });

  const serializer = new XMLSerializer();
  const updatedContent = serializer.serializeToString(doc);
  log('Exiting replacePlaceholder');
  return updatedContent;
};

const processDocument = async (jsonContent) => {
  const templateFilePath = './Test Document.docx';
  const fileName = 'word/document.xml';

  const newFileName = `./updated_${uuidv4()}.docx`;
  fs.copyFileSync(templateFilePath, newFileName);

  const documentContent = readZipFile(newFileName, fileName);
  const updatedContent = replacePlaceholder(documentContent, jsonContent);
  writeZipFile(newFileName, fileName, updatedContent);

  return newFileName;
};

// Controller functions
exports.extractTags = async (req, res) => {
  const filePath = req.file.path;
  try {
    const tags = await extractContentControlTags(filePath);
    res.json(tags);
  } catch (error) {
    res.status(500).send({ error: 'Error extracting tags' });
  } finally {
    fs.unlinkSync(filePath);
  }
};

exports.updateDocument = async (req, res) => {
  log(`Received JSON: ${JSON.stringify(req.body)}`);
  try {
    const newFileName = await processDocument(req.body);
    res.download(newFileName, (err) => {
      if (err) {
        throw err;
      } else {
        log(`File downloaded: ${newFileName}`);
        fs.unlinkSync(newFileName); // Delete the file after download
      }
    });
  } catch (error) {
    console.error('Error:', error);
    res.status(500).send({ error: 'Error updating document' });
  }
};
 
