// postdata.js
const fs = require('fs');
const AdmZip = require('adm-zip');
const { v4: uuidv4 } = require('uuid');
const { DOMParser, XMLSerializer } = require('@xmldom/xmldom');
const xpath = require('xpath');

const log = (message) => {
  console.log(`[${new Date().toISOString()}] ${message}`);
};

const readZipFile = (zipFilePath, fileName) => {
  const zip = new AdmZip(zipFilePath);
  const zipEntry = zip.getEntry(fileName);
  const content = zipEntry.getData().toString('utf8');
  return content;
};

const writeZipFile = (zipFilePath, fileName, content) => {
  const zip = new AdmZip(zipFilePath);
  zip.updateFile(fileName, Buffer.from(content, 'utf8'));
  zip.writeZip(zipFilePath);
};

const replacePlaceholder = (documentContent, jsonContent) => {
  log(`Entering replacePlaceholder`);
  const doc = new DOMParser().parseFromString(documentContent, 'text/xml');
  const select = xpath.useNamespaces({ "w": "http://schemas.openxmlformats.org/wordprocessingml/2006/main" });

  select("//w:sdt", doc).forEach(node => {
    const tagNode = select('.//w:tag/@w:val', node)[0];
    if (tagNode) {
      const tagName = tagNode.value;
      log(`Processing tag: ${tagName}`);
      const tagValue = jsonContent[tagName];
      
      if (tagValue !== null && tagValue !== undefined) {
        log(`Found value for ${tagName}: ${tagValue}`);
        const textNodes = select('.//w:t', node);
        
        if (textNodes.length > 0) {
          log(`Replacing text nodes for tag: ${tagName}`);
          textNodes.forEach(textNode => {
            textNode.textContent = tagValue;
          });
        } else {
          log(`No text nodes found for tag: ${tagName}`);
        }
      } else {
        log(`No value found for tag: ${tagName}`);
      }
    } else {
      log(`No tagNode found in node`);
    }
  });
  
  const serializer = new XMLSerializer();
  const updatedContent = serializer.serializeToString(doc);
  log(`Exiting replacePlaceholder`);
  return updatedContent;
};

const processDocument = async (jsonContent) => {
  const templateFilePath = './Test Document.docx';
  const fileName = 'word/document.xml';

  const newFileName = `./updated_${uuidv4()}.docx`;
  fs.copyFileSync(templateFilePath, newFileName);

  const documentContent = readZipFile(newFileName, fileName);
  const updatedContent = replacePlaceholder(documentContent, jsonContent);
  writeZipFile(newFileName, fileName, updatedContent);

  return newFileName;
};

module.exports = { processDocument };
-------------------

const fs = require('fs');
const AdmZip = require('adm-zip');
var xpath = require('xpath');
var dom = require('@xmldom/xmldom').DOMParser;
const xmlSerializer = require('@xmldom/xmldom').XMLSerializer;

const readZipFile = (zipFilePath, fileName) => {
    const zip = new AdmZip(zipFilePath);
    const zipEntry = zip.getEntry(fileName);
    const content = zipEntry.getData().toString('utf8');
    return content;
};

const writeZipFile = (zipFilePath, fileName, content) => {
    const zip = new AdmZip(zipFilePath);
    zip.updateFile(fileName, Buffer.from(content, 'utf8'));
    zip.writeZip(zipFilePath);
};

const replacePlaceholder = (documentContent, jsonContent) => {
    const doc = new dom().parseFromString(documentContent, 'text/xml');
    const select = xpath.useNamespaces({ "w": "http://schemas.openxmlformats.org/wordprocessingml/2006/main" });
    const tags = JSON.parse(jsonContent);

    const processTagValue = (value) => {
        if (Array.isArray(value)) {
            return value.map((item, index) => {
                if (typeof item === 'string') {
                    return `${index + 1}. ${item}`;
                } else if (typeof item === 'object' && item.text) {
                    return `${index + 1}. ${item.text}`;
                }
                return '';
            }).join('\n');
        } else if (typeof value === 'object' && value.text) {
            return value.text;
        }
        return value;
    };

    select("//w:sdt", doc).forEach(node => {
        const tagNode = select('.//w:tag/@w:val', node)[0];
        if (tagNode) {
            const tagName = tagNode.value;
            if (tags.hasOwnProperty(tagName)) {
                const textNodes = select('.//w:t', node);
                if (textNodes.length > 0) {
                    const processedValue = processTagValue(tags[tagName]);
                    const parts = processedValue.split('\n');

                    // Clear existing text nodes
                    textNodes.forEach((textNode, index) => {
                        if (index === 0) {
                            textNode.textContent = parts[0];
                        } else {
                            textNode.parentNode.removeChild(textNode);
                        }
                    });

                    // Add new text nodes and line breaks
                    for (let i = 1; i < parts.length; i++) {
                        const breakNode = doc.createElement('w:br');
                        const newTextNode = doc.createElement('w:t');
                        newTextNode.textContent = parts[i];
                        textNodes[0].parentNode.appendChild(breakNode);
                        textNodes[0].parentNode.appendChild(newTextNode);
                    }
                }
            }
        }
    });

    const serializer = new xmlSerializer();
    return serializer.serializeToString(doc);

};

const zipFilePath = './newdoc2.docx';
const fileName = 'word/document.xml';
const jsonPath = './myoutputk.json';

const documentContent = readZipFile(zipFilePath, fileName);
const jsonContent = fs.readFileSync(jsonPath, 'utf8');

const updatedContent = replacePlaceholder(documentContent, jsonContent);
writeZipFile(zipFilePath, fileName, updatedContent);


console.log('Document updated successfully');
=====================================

//upload.js


const fs = require('fs');
const JSZip = require('jszip');
const xml2js = require('xml2js');
const path = require('path');
const filePath = path.join(__dirname, './newdoc.docx');

const log = (message) => {
  console.log(`[${new Date().toISOString()}] ${message}`);
};

const readFileContent = async (filePath) => {
  return fs.promises.readFile(filePath);
};

const extractXmlFromZip = async (data) => {
  const zip = await JSZip.loadAsync(data);
  return zip.file('word/document.xml').async('text');
};

const parseXml = async (xmlContent) => {
  const parser = new xml2js.Parser();
  return parser.parseStringPromise(xmlContent);
};

const traverseNodes = (node, tags) => {
  if (node['w:sdt']) {
    node['w:sdt'].forEach(sdt => {
      const sdtPr = sdt['w:sdtPr'] && Array.isArray(sdt['w:sdtPr']) ? sdt['w:sdtPr'][0] : null;
      const tag = sdtPr && sdtPr['w:tag'] && Array.isArray(sdtPr['w:tag']) ? sdtPr['w:tag'][0] : null;
      if (tag && tag['$'] && tag['$']['w:val']) {
        const tagName = tag['$']['w:val'];
        const sdtContent = sdt['w:sdtContent'] && Array.isArray(sdt['w:sdtContent']) ? sdt['w:sdtContent'][0] : null;
        const tagValue = sdtContent ? extractTagValue(sdtContent) : '';
        if (tagValue.trim() !== '') {
          tags[tagName] = tagValue;
        }
      }
    });
  }
  Object.values(node).forEach(value => {
    if (Array.isArray(value)) {
      value.forEach(child => traverseNodes(child, tags));
    }
  });
};

const extractTagValue = (content) => {
  let text = '';
  function traverseContent(contentNode) {
    if (contentNode['w:t'] && Array.isArray(contentNode['w:t'])) {
      contentNode['w:t'].forEach(textNode => {
        if (typeof textNode === 'string') {
          text += textNode;
        } else if (textNode['_']) {
          text += textNode['_'];
        }
      });
    }
    Object.values(contentNode).forEach(value => {
      if (Array.isArray(value)) {
        value.forEach(child => traverseContent(child));
      }
    });
  }
  traverseContent(content);
  return text;
};

const extractContentControlTags = async (filePath) => {
  try {
    const data = await readFileContent(filePath);
    const documentXml = await extractXmlFromZip(data);
    const xmlParsed = await parseXml(documentXml);

    const tags = {};
    const body = xmlParsed['w:document']['w:body'][0];
    traverseNodes(body, tags);

    return tags;
  } catch (error) {
    console.error('Error:', error);
    throw error;
  }
};

module.exports = { extractContentControlTags };
----------
const fs = require('fs');
const JSZip = require('jszip');
const xml2js = require('xml2js');

async function extractContentControlTags(fpath) {
  try {
    const documentXml = await readDocumentXml(fpath);
    const tags = await parseDocumentXml(documentXml);
    saveTagsToFile(tags, 'myoutputk.json');
  } catch (error) {
    console.error('Error:', error);
  }
}

async function readDocumentXml(fpath) {
  const data = fs.readFileSync(fpath);
  const zip = await JSZip.loadAsync(data);
  const documentXml = await zip.file('word/document.xml').async('text');
  return documentXml;
}

async function parseDocumentXml(documentXml) {
  const parser = new xml2js.Parser();
  return new Promise((resolve, reject) => {
    parser.parseString(documentXml, (err, result) => {
      if (err) {
        return reject(err);
      }
      const tags = extractTagsFromBody(result['w:document']['w:body'][0]);
      resolve(tags);
    });
  });
}

function extractTagsFromBody(body) {
  const tags = {};

  function traverseNodes(node) {
    if (node['w:sdt']) {
      node['w:sdt'].forEach(sdt => {
        const tag = sdt['w:sdtPr'][0]['w:tag'];
        if (tag && tag[0]['$'] && tag[0]['$']['w:val']) {
          const tagName = tag[0]['$']['w:val'];
          const tagValue = extractTagValue(sdt['w:sdtContent'][0]);
          if (typeof tagValue === 'string' && tagValue.trim() !== '') {
            tags[tagName] = tagValue;
          } else if (Array.isArray(tagValue) && tagValue.length > 0) {
            tags[tagName] = tagValue;
          }
        }
      });
    }
    Object.values(node).forEach(value => {
      if (Array.isArray(value)) {
        value.forEach(child => traverseNodes(child));
      }
    });
  }

  traverseNodes(body);
  return tags;
}

function extractTagValue(content) {
  let text = '';
  let listItems = [];

  function traverseContent(contentNode) {
    if (contentNode['w:p']) {
      contentNode['w:p'].forEach(pNode => {
        if (pNode['w:pPr'] && pNode['w:pPr'][0]['w:numPr']) {
          // Detect a numbered list item
          const listItem = extractTextFromNode(pNode);
          if (typeof listItem === 'string' && listItem.trim() !== '') {
            listItems.push(listItem);
          } else if (typeof listItem === 'object' && listItem.text.trim() !== '') {
            listItems.push(listItem);
          }
        } else {
          // Regular text node
          const pText = extractTextFromNode(pNode);
          if (typeof pText === 'string' && pText.trim() !== '') {
            text += pText;
          } else if (typeof pText === 'object' && pText.text.trim() !== '') {
            text += pText.text;
          }
        }
      });
    }
    Object.values(contentNode).forEach(value => {
      if (Array.isArray(value)) {
        value.forEach(child => traverseContent(child));
      }
    });
  }

  function extractTextFromNode(node) {
    let nodeText = '';
    let highlighted = false;

    if (node['w:r']) {
      node['w:r'].forEach(rNode => {
        if (rNode['w:rPr'] && rNode['w:rPr'][0]['w:highlight']) {
          highlighted = true;
        }
        if (rNode['w:t']) {
          rNode['w:t'].forEach(textNode => {
            if (typeof textNode === 'string') {
              nodeText += textNode;
            } else if (textNode['_']) {
              nodeText += textNode['_'];
            }
          });
        }
      });
    }

    if (highlighted) {
      return { text: nodeText, highlighted: true };
    }
    return nodeText;
  }

  traverseContent(content);

  if (listItems.length > 0) {
    // Return list items as an array of strings or objects
    return listItems;
  } else {
    return text;
  }
}

function saveTagsToFile(tags, outputPath) {
  const jsonFile = JSON.stringify(tags, null, 2);
  fs.writeFileSync(outputPath, jsonFile);
}

const fpath = './Test Document.docx';
extractContentControlTags(fpath);
