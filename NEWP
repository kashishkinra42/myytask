upload.js 
const fs = require('fs');
const JSZip = require('jszip');
const xml2js = require('xml2js');
const path = require('path');
const filePath = path.join(__dirname, './newdoc.docx');

const log = (message) => console.log(`[${new Date().toISOString()}] ${message}`);

const readFileContent = (filePath) => fs.promises.readFile(filePath);

const extractXmlFromZip = async (data) => {
  const zip = await JSZip.loadAsync(data);
  return zip.file('word/document.xml').async('text');
};

const parseXml = (xmlContent) => new xml2js.Parser().parseStringPromise(xmlContent);

const extractTagValue = (content) => {
  let text = '';
  const listItems = [];

  const extractTextFromNode = (node) => {
    let nodeText = '';
    if (node['w:r']) {
      node['w:r'].forEach(rNode => {
        if (rNode['w:t']) {
          rNode['w:t'].forEach(textNode => {
            nodeText += typeof textNode === 'string' ? textNode : textNode['_'];
          });
        }
      });
    }
    return nodeText;
  };

  const traverseContent = (contentNode) => {
    if (contentNode['w:p']) {
      contentNode['w:p'].forEach(pNode => {
        const pText = extractTextFromNode(pNode);
        if (pNode['w:pPr'] && pNode['w:pPr'][0]['w:numPr']) {
          if (pText.trim()) listItems.push(pText);
        } else {
          text += pText;
        }
      });
    }
    Object.values(contentNode).forEach(value => {
      if (Array.isArray(value)) value.forEach(child => traverseContent(child));
    });
  };

  traverseContent(content);

  return listItems.length > 0 ? listItems : text;
};

const extractTagsFromBody = (body) => {
  const tags = {};

  const traverseNodes = (node) => {
    if (node['w:sdt']) {
      node['w:sdt'].forEach(sdt => {
        const tag = sdt['w:sdtPr'][0]['w:tag'][0]['$']['w:val'];
        if (tag) {
          const tagValue = extractTagValue(sdt['w:sdtContent'][0]);
          if (tagValue.trim()) tags[tag] = tagValue;
        }
      });
    }
    Object.values(node).forEach(value => {
      if (Array.isArray(value)) value.forEach(child => traverseNodes(child));
    });
  };

  traverseNodes(body);
  return tags;
};

const extractContentControlTags = async (filePath) => {
  try {
    const data = await readFileContent(filePath);
    const documentXml = await extractXmlFromZip(data);
    const xmlParsed = await parseXml(documentXml);
    return extractTagsFromBody(xmlParsed['w:document']['w:body'][0]);
  } catch (error) {
    console.error('Error:', error);
    throw error;
  }
};

module.exports = { extractContentControlTags };

-------------------------


app.js
const express = require('express');
const fs = require('fs');
const multer = require('multer');  
const upload = multer({ dest: 'uploads/' });
const path = require('path');
const { processDocument } = require('./PostData');
const { extractContentControlTags } = require('./upload.js');
const app = express();
// const { extractContentControlTags } = require('./upload');

app.use(express.json());

const log = (message) => {
  console.log(`[${new Date().toISOString()}] ${message}`);
};

app.post('/extract-tags', upload.single('Docxfile'), async (req, res) => {
  if (!req.file) {
    log(`No file received in the request`);
    return res.status(400).send('No file uploaded');
  }

  log(`Received file for extraction: ${req.file.path}`);
  const filePath = req.file.path;

  try {
    const tags = await extractContentControlTags(filePath);
    res.status(200).json(tags);
  } catch (error) {
    console.error('Error extracting tags:', error);
    res.status(500).send('Error extracting tags');
  } finally {
    fs.unlinkSync(filePath);
  }
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  log(`Server is running on port ${PORT}`);
});
