upload.js 
const fs = require('fs');
const JSZip = require('jszip');
const xml2js = require('xml2js');
const path = require('path');
const filePath = path.join(__dirname, './newdoc.docx');

const log = (message) => console.log(`[${new Date().toISOString()}] ${message}`);

const readFileContent = async (filePath) => {
  try {
    return await fs.promises.readFile(filePath);
  } catch (error) {
    log(`Error reading file: ${error}`);
    throw error;
  }
};

const extractXmlFromZip = async (data) => {
  try {
    const zip = await JSZip.loadAsync(data);
    const file = zip.file('word/document.xml');
    if (!file) {
      throw new Error('document.xml not found in zip');
    }
    return file.async('text');
  } catch (error) {
    log(`Error extracting XML from ZIP: ${error}`);
    throw error;
  }
};

const parseXml = async (xmlContent) => {
  try {
    const parser = new xml2js.Parser();
    return await parser.parseStringPromise(xmlContent);
  } catch (error) {
    log(`Error parsing XML: ${error}`);
    throw error;
  }
};

const extractTagValue = (content) => {
  let text = '';
  const listItems = [];

  const extractTextFromNode = (node) => {
    let nodeText = '';
    if (node['w:r']) {
      node['w:r'].forEach(rNode => {
        if (rNode['w:t']) {
          rNode['w:t'].forEach(textNode => {
            nodeText += typeof textNode === 'string' ? textNode : textNode['_'];
          });
        }
      });
    }
    return nodeText;
  };

  const traverseContent = (contentNode) => {
    if (contentNode['w:p']) {
      contentNode['w:p'].forEach(pNode => {
        const pText = extractTextFromNode(pNode);
        if (pNode['w:pPr'] && pNode['w:pPr'][0]['w:numPr']) {
          if (pText.trim()) listItems.push(pText);
        } else {
          text += pText;
        }
      });
    }
    Object.values(contentNode).forEach(value => {
      if (Array.isArray(value)) value.forEach(child => traverseContent(child));
    });
  };

  traverseContent(content);

  return listItems.length > 0 ? listItems : text;
};

const extractTagsFromBody = (body) => {
  const tags = {};

  const traverseNodes = (node) => {
    if (node['w:sdt']) {
      node['w:sdt'].forEach(sdt => {
        const sdtPr = sdt['w:sdtPr'] && sdt['w:sdtPr'][0];
        const tag = sdtPr && sdtPr['w:tag'] && sdtPr['w:tag'][0];
        if (tag && tag['$'] && tag['$']['w:val']) {
          const tagName = tag['$']['w:val'];
          const sdtContent = sdt['w:sdtContent'] && sdt['w:sdtContent'][0];
          const tagValue = sdtContent ? extractTagValue(sdtContent) : '';
          if (tagValue.trim()) {
            tags[tagName] = tagValue;
          }
        }
      });
    }
    Object.values(node).forEach(value => {
      if (Array.isArray(value)) value.forEach(child => traverseNodes(child));
    });
  };

  traverseNodes(body);
  return tags;
};

const extractContentControlTags = async (filePath) => {
  try {
    log(`Reading file: ${filePath}`);
    const data = await readFileContent(filePath);

    log('Extracting XML from ZIP');
    const documentXml = await extractXmlFromZip(data);

    log('Parsing XML content');
    const xmlParsed = await parseXml(documentXml);

    log('Extracting tags from XML');
    const tags = extractTagsFromBody(xmlParsed['w:document']['w:body'][0]);

    log('Tags extraction completed');
    return tags;
  } catch (error) {
    log(`Error: ${error}`);
    throw error;
  }
};

module.exports = { extractContentControlTags };


-------------------------


app.js
const express = require('express');
const fs = require('fs');
const multer = require('multer');  
const upload = multer({ dest: 'uploads/' });
const path = require('path');
const { processDocument } = require('./PostData');
const { extractContentControlTags } = require('./upload.js');
const app = express();
// const { extractContentControlTags } = require('./upload');

app.use(express.json());

const log = (message) => {
  console.log(`[${new Date().toISOString()}] ${message}`);
};

app.post('/extract-tags', upload.single('Docxfile'), async (req, res) => {
  if (!req.file) {
    log(`No file received in the request`);
    return res.status(400).send('No file uploaded');
  }

  log(`Received file for extraction: ${req.file.path}`);
  const filePath = req.file.path;

  try {
    const tags = await extractContentControlTags(filePath);
    res.status(200).json(tags);
  } catch (error) {
    console.error('Error extracting tags:', error);
    res.status(500).send('Error extracting tags');
  } finally {
    fs.unlinkSync(filePath);
  }
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  log(`Server is running on port ${PORT}`);
});
