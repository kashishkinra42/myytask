const fs = require('fs');
const JSZip = require('jszip');
const xml2js = require('xml2js');

async function extractContentControlTags(fpath) {
  try {
    const documentXml = await readDocumentXml(fpath);
    const tags = await parseDocumentXml(documentXml);
    saveTagsToFile(tags, 'myoutput.json');
  } catch (error) {
    console.error('Error:', error);
  }
}

async function readDocumentXml(fpath) {
  const data = fs.readFileSync(fpath);
  const zip = await JSZip.loadAsync(data);
  const documentXml = await zip.file('word/document.xml').async('text');
  return documentXml;
}

async function parseDocumentXml(documentXml) {
  const parser = new xml2js.Parser();
  return new Promise((resolve, reject) => {
    parser.parseString(documentXml, (err, result) => {
      if (err) {
        return reject(err);
      }
      const tags = extractTagsFromBody(result['w:document']['w:body'][0]);
      resolve(tags);
    });
  });
}

function extractTagsFromBody(body) {
  const tags = {};

  function traverseNodes(node) {
    if (node['w:sdt']) {
      node['w:sdt'].forEach(sdt => {
        const tag = sdt['w:sdtPr'][0]['w:tag'];
        if (tag && tag[0]['$'] && tag[0]['$']['w:val']) {
          const tagName = tag[0]['$']['w:val'];
          const tagValue = extractTagValue(sdt['w:sdtContent'][0]);
          if (tagValue.trim() !== '') {
            tags[tagName] = tagValue;
          }
        }
      });
    }
    Object.values(node).forEach(value => {
      if (Array.isArray(value)) {
        value.forEach(child => traverseNodes(child));
      }
    });
  }

  traverseNodes(body);
  return tags;
}

function extractTagValue(content) {
  let text = '';

  function traverseContent(contentNode) {
    if (contentNode['w:t']) {
      contentNode['w:t'].forEach(textNode => {
        if (typeof textNode === 'string') {
          text += textNode;
        } else if (textNode['_']) {
          text += textNode['_'];
        }
      });
    }
    Object.values(contentNode).forEach(value => {
      if (Array.isArray(value)) {
        value.forEach(child => traverseContent(child));
      }
    });
  }

  traverseContent(content);
  return text;
}

function saveTagsToFile(tags, outputPath) {
  const jsonFile = JSON.stringify(tags, null, 2);
  fs.writeFileSync(outputPath, jsonFile);
}

const fpath = './Test Document.docx';
extractContentControlTags(fpath);


// -----------------
const fs = require('fs');
const JSZip = require('jszip');
const xml2js = require('xml2js');

async function extractContentControlTags(fpath) {
  try {
    const documentXml = await readDocumentXml(fpath);
    const tags = await parseDocumentXml(documentXml);
    saveTagsToFile(tags, 'myoutput.json');
  } catch (error) {
    console.error('Error:', error);
  }
}

async function readDocumentXml(fpath) {
  const data = fs.readFileSync(fpath);
  const zip = await JSZip.loadAsync(data);
  const documentXml = await zip.file('word/document.xml').async('text');
  return documentXml;
}

async function parseDocumentXml(documentXml) {
  const parser = new xml2js.Parser();
  return new Promise((resolve, reject) => {
    parser.parseString(documentXml, (err, result) => {
      if (err) {
        return reject(err);
      }
      const tags = extractTagsFromBody(result['w:document']['w:body'][0]);
      resolve(tags);
    });
  });
}

function extractTagsFromBody(body) {
  const tags = {};

  function traverseNodes(node) {
    if (node['w:sdt']) {
      node['w:sdt'].forEach(sdt => {
        const tag = sdt['w:sdtPr'][0]['w:tag'];
        if (tag && tag[0]['$'] && tag[0]['$']['w:val']) {
          const tagName = tag[0]['$']['w:val'];
          const tagValue = extractTagValue(sdt['w:sdtContent'][0]);
          if (typeof tagValue === 'string' && tagValue.trim() !== '') {
            tags[tagName] = tagValue;
          } else if (Array.isArray(tagValue) && tagValue.length > 0) {
            tags[tagName] = tagValue;
          }
        }
      });
    }
    Object.values(node).forEach(value => {
      if (Array.isArray(value)) {
        value.forEach(child => traverseNodes(child));
      }
    });
  }

  traverseNodes(body);
  return tags;
}

function extractTagValue(content) {
  let text = '';
  let listItems = [];

  function traverseContent(contentNode) {
    if (contentNode['w:p'] && contentNode['w:p'][0]['w:pPr'] && contentNode['w:p'][0]['w:pPr'][0]['w:numPr']) {
      // Detect a numbered list item
      const listItem = extractTextFromNode(contentNode);
      if (listItem.trim() !== '') {
        listItems.push(listItem);
      }
    } else if (contentNode['w:t']) {
      // Regular text node
      contentNode['w:t'].forEach(textNode => {
        if (typeof textNode === 'string') {
          text += textNode;
        } else if (textNode['_']) {
          text += textNode['_'];
        }
      });
    }
    Object.values(contentNode).forEach(value => {
      if (Array.isArray(value)) {
        value.forEach(child => traverseContent(child));
      }
    });
  }

  function extractTextFromNode(node) {
    let nodeText = '';
    if (node['w:t']) {
      node['w:t'].forEach(textNode => {
        if (typeof textNode === 'string') {
          nodeText += textNode;
        } else if (textNode['_']) {
          nodeText += textNode['_'];
        }
      });
    }
    return nodeText;
  }

  traverseContent(content);

  if (listItems.length > 0) {
    // Format list items as an array of strings
    return listItems.map((item, index) => `${index + 1}. ${item}\n`);
  } else {
    return text;
  }
}

function saveTagsToFile(tags, outputPath) {
  const jsonFile = JSON.stringify(tags, null, 2);
  fs.writeFileSync(outputPath, jsonFile);
}

const fpath = './Test Document.docx';
extractContentControlTags(fpath);



==================


{
  "Incident Number": "1234",
  "Date": "6/13/2024",
  "Authors": "Kashish kinraa",
  "Status": "Mitigated",
  "Summary": "This is the root cause",
  "Impact": "This is the impact This is the impact",
  "Root Causes": "This is the root cause",
  "Trigger": "Hellohi",
  "Change(s) that triggered the incident": "Hello hiHellohi",
  "Resolution": "Hello hhi",
  "Detection": "Helloi",
  "Incident Theme": "Choose an item.",
  "Link to the latest ORR": "Hello hilohi",
  "SLO Impact": "Hello hi",
  "What Went Well": "Kash",
  "What Went Wrong": "Click or tap here to enter text.",
  "Where We Got Lucky": "KashKinraMy nameHeloohi",
  "F2": "Click or tap here to enter text."
}
