Here is the code refactored to match the specified path structure:

server.js
javascript
Copy code
import express from 'express';
import multer from 'multer';
import { log } from './handlers';
import { handleUpdateDocument, handleExtractTags } from './api/v1/service-now/integrations/handlers';

const app = express();
const upload = multer({ dest: 'uploads/' });

app.use(express.json());

app.route('/api/v1/service-now/integrations/update-document').post(handleUpdateDocument);
app.route('/api/v1/service-now/integrations/extract-tags').post(upload.single('Docxfile'), handleExtractTags);

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => log(`Server is running on port ${PORT}`));
api/v1/service-now/integrations/handlers.js
javascript
Copy code
import fs from 'fs';
import { processDocument } from './PostData';
import { extractContentControlTags } from './upload';

export const log = (message) => {
  console.log(`[${new Date().toISOString()}] ${message}`);
};

export const handleUpdateDocument = async (req, res) => {
  log(`Received JSON: ${JSON.stringify(req.body)}`);
  const jsonContent = req.body;

  try {
    const updatedFilePath = await processDocument(jsonContent);

    res.setHeader('Content-Disposition', 'attachment; filename="updated_document.docx"');
    res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document');

    const fileStream = fs.createReadStream(updatedFilePath);

    fileStream.pipe(res).on('finish', () => {
      fs.unlink(updatedFilePath, (unlinkErr) => {
        if (unlinkErr) {
          console.error('Error deleting file:', unlinkErr);
        }
      });
    });

    fileStream.on('error', (err) => {
      console.error('Error reading file:', err);
      res.status(500).send('Error reading file');
    });

  } catch (error) {
    console.error('Error processing document:', error);
    res.status(500).send('Error processing document');
  }
};

export const handleExtractTags = async (req, res) => {
  if (!req.file) {
    log(`No file received in the request`);
    return res.status(400).send('No file uploaded');
  }

  log(`Received file for extraction: ${req.file.path}`);
  const filePath = req.file.path;

  try {
    const tags = await extractContentControlTags(filePath);
    res.status(200).json(tags);
  } catch (error) {
    console.error('Error extracting tags:', error);
    res.status(500).send('Error extracting tags');
  } finally {
    fs.unlinkSync(filePath);
  }
};
api/v1/service-now/integrations/PostData.js
javascript
Copy code
export const processDocument = async (jsonContent) => {
  // Implementation of processDocument
};
api/v1/service-now/integrations/upload.js
javascript
Copy code
export const extractContentControlTags = async (filePath) => {
  // Implementation of extractContentControlTags
};
  app.route('/api/v1/service-now/integrations/incident/record/push')
        .post(bodyParser.json({"type" : "*/*"}),controller.sendDataFromSNOW); in this format calling the respective function from controller.js
ChatGPT
Here is the refactored code with routes defined in the specified format and calling the respective functions from controller.js:

server.js
javascript
Copy code
import express from 'express';
import bodyParser from 'body-parser';
import multer from 'multer';
import * as controller from './api/v1/service-now/integrations/controller';
import { log } from './api/v1/service-now/integrations/handlers';

const app = express();
const upload = multer({ dest: 'uploads/' });

app.use(express.json());

app.route('/api/v1/service-now/integrations/update-document')
    .post(bodyParser.json({ "type": "*/*" }), controller.handleUpdateDocument);

app.route('/api/v1/service-now/integrations/extract-tags')
    .post(upload.single('Docxfile'), controller.handleExtractTags);

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => log(`Server is running on port ${PORT}`));
api/v1/service-now/integrations/controller.js
javascript
Copy code
import fs from 'fs';
import { processDocument } from './PostData';
import { extractContentControlTags } from './upload';
import { log } from './handlers';

export const handleUpdateDocument = async (req, res) => {
  log(`Received JSON: ${JSON.stringify(req.body)}`);
  const jsonContent = req.body;

  try {
    const updatedFilePath = await processDocument(jsonContent);

    res.setHeader('Content-Disposition', 'attachment; filename="updated_document.docx"');
    res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document');

    const fileStream = fs.createReadStream(updatedFilePath);

    fileStream.pipe(res).on('finish', () => {
      fs.unlink(updatedFilePath, (unlinkErr) => {
        if (unlinkErr) {
          console.error('Error deleting file:', unlinkErr);
        }
      });
    });

    fileStream.on('error', (err) => {
      console.error('Error reading file:', err);
      res.status(500).send('Error reading file');
    });

  } catch (error) {
    console.error('Error processing document:', error);
    res.status(500).send('Error processing document');
  }
};

export const handleExtractTags = async (req, res) => {
  if (!req.file) {
    log(`No file received in the request`);
    return res.status(400).send('No file uploaded');
  }

  log(`Received file for extraction: ${req.file.path}`);
  const filePath = req.file.path;

  try {
    const tags = await extractContentControlTags(filePath);
    res.status(200).json(tags);
  } catch (error) {
    console.error('Error extracting tags:', error);
    res.status(500).send('Error extracting tags');
  } finally {
    fs.unlinkSync(filePath);
  }
};
api/v1/service-now/integrations/PostData.js
javascript
Copy code
export const processDocument = async (jsonContent) => {
  // Implementation of processDocument
};
api/v1/service-now/integrations/upload.js
javascript
Copy code
export const extractContentControlTags = async (filePath) => {
  // Implementation of extractContentControlTags
};
